---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for BiteBack Web Game Frontend Demo

## General Guidelines
1. **Purpose**: Assist in designing a frontend demo for a lightweight, zombie-themed survival web game focused on usability, engagement, and mobile responsiveness.
2. **Language**: Write all code and comments in English, unless explicitly requested otherwise.
3. **Tone**: Be clear, concise, and technical; avoid unnecessary explanations unless asked.
4. **Consistency**: Use React functional components, ES6+ syntax, and Tailwind CSS classes consistently across all files.
The should support multilanguage. !important
## Code Structure
5. **File Organization**:
   - Main app file: `App.jsx`
   - Components: `MapComponent.jsx`, `ChatComponent.jsx`, `Header.jsx`, `Footer.jsx`, `Inventory.jsx`
   - Data: `mockData.js`
   - Styles: `index.css`
6. **Modularity**: Break down the UI into reusable components; avoid monolithic code.
7. **Naming**: Use descriptive, camelCase names (e.g., `addZombieMarker`, `requestItem`).

## Technical Requirements
8. **Frontend Only**: Use mock data and simulate backend interactions; no real API calls.
9. **Map Integration**:
   - Use Leaflet.js with OpenStreetMap as the map provider.
   - Center the map on Istanbul (41.0082° N, 28.9784° E, zoom 10) with a dropdown for Turkish cities (Istanbul, Ankara, Izmir).
   - Support red markers (zombies), green markers (survivor camps), and purple markers (traffic/survivors) with popups.
10. **Chat Simulation**:
    - Simulate Matrix-based chat with mock messages for survivor coordination.
    - Include city-based room selection, emergency message highlighting, and item requests.
11. **Styling**:
    - Use Tailwind CSS with a dark theme (e.g., #1a1a1a background, #00b4d8 accents, red for zombies, green for camps).
    - Ensure responsiveness (desktop: side-by-side map/chat, mobile: stacked below 768px).
12. **Game Elements**:
    - Add an EXP system: 20 EXP (zombie marker), 30 EXP (camp proposal), 10 EXP (vote), 50 EXP (SOS).
    - Include a basic inventory display with mock items (medkit, serum, painkiller, food).

## Functionality
13. **Interactivity**:
    - Allow marker placement via map clicks with a popup form (e.g., "Type: Zombie/Camp").
    - Auto-post camp proposals to chat with a voting mechanism (70% approval = 7/10 votes).
    - Update map layers when camps are approved; toggle "Safe Camps Only" view.
    - Enable players to request items in chat (e.g., "!need medkit") with a button or dropdown.
14. **Item Requests**:
    - Add a "Request Item" feature in the chat UI (dropdown: medkit, serum, painkiller, food).
    - Post requests as "!need [item]" messages, highlighted in yellow, earning 10 EXP per request.
15. **Additional Features**:
    - Random Zombie Events: Simulate occasional zombie spawns (e.g., every 30 seconds, add a random zombie marker).
    - Inventory Display: Show a mock inventory in the header (e.g., "Medkit: 2, Food: 1").
16. **Mock Data**:
    - Provide sample markers (e.g., 3 zombies, 2 camps, 2 traffic) and chat messages (e.g., 5 normal, 2 SOS, 2 item requests).
    - Store in `mockData.js` as a JavaScript object.

## Output Expectations
17. **Complete Code**: Generate full, runnable code for all requested files.
18. **Instructions**: Include a brief setup guide (e.g., dependencies, run commands).
19. **No Assumptions**: Do not assume prior code exists unless provided; create everything from scratch.
20. **Error Handling**: Add basic checks (e.g., invalid marker type, empty chat input) but keep it simple.

## Constraints
21. **No Backend**: Focus solely on frontend; simulate data and interactions.
22. **No External APIs**: Use OpenStreetMap tiles directly via Leaflet; no additional map APIs.
23. **Time Efficiency**: Prioritize simplicity and speed for a quick demo, avoiding over-engineering.

## Additional Notes
24. **Context Awareness**: Base the design on a zombie survival theme inspired by crisis scenarios (e.g., Ukraine, Turkey), but keep it fun and light.
25. **Flexibility**: Allow easy modification of mock data, styles, or EXP values later.
26. **Documentation**: Add minimal comments in code to explain key logic (e.g., voting, EXP updates, random events).
27. **Good Cause**: Ensure the demo is engaging and usable to support the user’s promise to use it for awareness and good.

Follow these rules strictly unless I explicitly request a deviation. Let’s build a clean, functional, and fun game demo!